@model WeatherByGoogleLocation.Models.WeatherData;

@{
    ViewData["Title"] = "Google Map";
}

<link rel="stylesheet" href="~/css/gmap.css" asp-append-version="true" />

<div class="row mapRow">
    <div class="col-3 map">
    
        <div id="map"></div>
        <script>
            (g => { var h, a, k, p = "The Google Maps JavaScript API", c = "google", l = "importLibrary", q = "__ib__", m = document, b = window; b = b[c] || (b[c] = {}); var d = b.maps || (b.maps = {}), r = new Set, e = new URLSearchParams, u = () => h || (h = new Promise(async (f, n) => { await (a = m.createElement("script")); e.set("libraries", [...r] + ""); for (k in g) e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]); e.set("callback", c + ".maps." + q); a.src = `https://maps.${c}apis.com/maps/api/js?` + e; d[q] = f; a.onerror = () => h = n(Error(p + " could not load.")); a.nonce = m.querySelector("script[nonce]")?.nonce || ""; m.head.append(a) })); d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)) })({
                key: "@Html.Raw(@ViewBag.APIKey)",
                v: "weekly",
                // Use the 'v' parameter to indicate the version to use (weekly, beta, alpha, etc.).
                // Add other bootstrap parameters as needed, using camel case.
            });
        </script>

    </div>
    <div class="col-9 weather">
        <div id="weatherData">
            Raw JSON Data (@ViewBag.Latitude, @ViewBag.Longitude): @Html.Raw(@ViewBag.Forecast);
        </div>
    </div>
</div>

<script src="~/js/gmap.js" asp-append-version="true"></script>
<script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>
